// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: user.proto

package userclient

import (
	"context"

	"zore/service/user/rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateUserRequest  = user.CreateUserRequest
	CreateUserResponse = user.CreateUserResponse
	DeleteUserRequest  = user.DeleteUserRequest
	DeleteUserResponse = user.DeleteUserResponse
	DetailRequest      = user.DetailRequest
	DetailResponse     = user.DetailResponse
	ListRequest        = user.ListRequest
	ListResponse       = user.ListResponse
	LoginRequest       = user.LoginRequest
	LoginResponse      = user.LoginResponse
	UpdateUserRequest  = user.UpdateUserRequest
	UpdateUserResponse = user.UpdateUserResponse
	UserItem           = user.UserItem

	User interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
		Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
		Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultUser) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultUser) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultUser) Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultUser) Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Detail(ctx, in, opts...)
}
