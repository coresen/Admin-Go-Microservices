// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(userFieldNames, ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`"), "=?,") + "=?"

	cacheUserIdPrefix       = "cache:user:id:"
	cacheUserUsernamePrefix = "cache:user:username:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*User, error)
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id uint64) error
		FindPageList(ctx context.Context, username *string, status *int64, page int, pageSize int) ([]*User, error)
		FindCount(ctx context.Context, username *string, status *int64) (int64, error)
		TransactCtx(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id         uint64       `db:"id"`
		ParentId   int64        `db:"parent_id"`
		Username   string       `db:"username"` // 用户姓名
		Password   string       `db:"password"` // 用户密码
		Status     int64        `db:"status"`   // 【是否正常】0:异常, 1:正常
		Ip         string       `db:"ip"`       // ip
		CreateUid  int64        `db:"create_uid"`
		CreateTime time.Time    `db:"create_time"`
		DeleteTime sql.NullTime `db:"delete_time"`
		UpdateTime time.Time    `db:"update_time"`
		LoginLast  sql.NullTime `db:"login_last"`
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

func (m *defaultUserModel) FindPageList(ctx context.Context, username *string, status *int64, page int, pageSize int) ([]*User, error) {
	offset := (page - 1) * pageSize
	var args []interface{}

	var builder strings.Builder
	builder.WriteString("select id, parent_id, username, password, status, ip, create_time, login_last, update_time, delete_time, create_uid from user")

	// 动态构建 WHERE 条件
	var conditions []string
	if username != nil {
		conditions = append(conditions, "username like concat('%', ?, '%')")
		args = append(args, *username)
	}
	if status != nil {
		conditions = append(conditions, "status = ?")
		args = append(args, *status)
	}

	if len(conditions) > 0 {
		builder.WriteString(" where ")
		builder.WriteString(strings.Join(conditions, " and "))
	}

	// 添加排序和分页
	builder.WriteString(" order by id desc limit ? offset ?")
	args = append(args, pageSize, offset)

	var resp []*User
	err := m.QueryRowsNoCacheCtx(ctx, &resp, builder.String(), args...)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (m *defaultUserModel) FindCount(ctx context.Context, username *string, status *int64) (int64, error) {
	var whereClause strings.Builder
	var args []interface{}

	whereClause.WriteString("SELECT COUNT(id) FROM user")

	// 动态构建WHERE条件
	var conditions []string
	if username != nil {
		conditions = append(conditions, "username LIKE CONCAT('%', ?, '%')")
		args = append(args, *username)
	}
	if status != nil {
		conditions = append(conditions, "status = ?")
		args = append(args, *status)
	}

	if len(conditions) > 0 {
		whereClause.WriteString(" WHERE ")
		whereClause.WriteString(strings.Join(conditions, " AND "))
	}

	var count int64
	err := m.QueryRowNoCacheCtx(ctx, &count, whereClause.String(), args...)
	if err != nil {
		return 0, fmt.Errorf("failed to count users: %w", err)
	}

	return count, nil
}
func (m *defaultUserModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, id)
	userUsernameKey := fmt.Sprintf("%s%v", cacheUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userIdKey, userUsernameKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id uint64) (*User, error) {
	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, userIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	userUsernameKey := fmt.Sprintf("%s%v", cacheUserUsernamePrefix, username)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, data.Id)
	userUsernameKey := fmt.Sprintf("%s%v", cacheUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		fmt.Println("query:",query)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Username, data.Password, data.Status, data.Ip, data.CreateUid, data.CreateTime, data.DeleteTime, data.UpdateTime, data.LoginLast)
	}, userIdKey, userUsernameKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	newData, err := m.FindOne(ctx, data.Id)
	if err != nil {
		return err
	}

	if data.Password != "" {
		newData.Password = data.Password
	}

	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, data.Id)
	userUsernameKey := fmt.Sprintf("%s%v", cacheUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ParentId, newData.Username, newData.Password, newData.Status, newData.Ip, newData.CreateUid, newData.CreateTime, newData.DeleteTime, newData.UpdateTime, newData.LoginLast, newData.Id)
	}, userIdKey, userUsernameKey)
	return err
}

func (m *defaultUserModel) TransactCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}


func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
