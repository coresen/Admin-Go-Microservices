// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRoleFieldNames          = builder.RawFieldNames(&UserRole{})
	userRoleRows                = strings.Join(userRoleFieldNames, ",")
	userRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(userRoleFieldNames, "`id`"), ",")
	userRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(userRoleFieldNames, "`id`"), "=?,") + "=?"
)

type (
	userRoleModel interface {
		Insert(ctx context.Context, data *UserRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserRole, error)
		FindOneByUserIdRoleId(ctx context.Context, userId int64, roleId int64) (*UserRole, error)
		Update(ctx context.Context, data *UserRole) error
		Delete(ctx context.Context, id int64) error
		DeleteByUserId(ctx context.Context, userid int64) error
		FindRolesByUserIds(ctx context.Context, userIds []int64) (map[int64][]*Role, error)
		BatchInsert(ctx context.Context, roleIds []*UserRole) error
	}

	defaultUserRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserRole struct {
		Id     int64  `db:"id"`
		UserId int64 `db:"user_id"`
		RoleId int64 `db:"role_id"`
	}
)

func (m *defaultUserRoleModel) FindRolesByUserIds(ctx context.Context, userIds []int64) (map[int64][]*Role, error) {

	if len(userIds) == 0 {
		return nil, nil
	}

	placeholders := make([]string, len(userIds))
	for i := range placeholders {
		placeholders[i] = "?"
	}
	result := strings.Join(placeholders, ",")
	// 构造 IN 查询（防止 SQL 注入）
	query := `SELECT  ur.user_id, r.id, r.role_name, r.description FROM role r JOIN user_role ur ON r.id = ur.role_id WHERE ur.user_id IN (` + result  + `)`

	var roleRelations []struct {
		UserId int64 `db:"user_id"`
		RoleId int64 `db:"id"`
		RoleName   string `db:"role_name"`
		Description   string `db:"description"`
	}

	args := make([]interface{}, len(userIds))
	for i, id := range userIds {
		args[i] = id
	}

	err := m.conn.QueryRowsCtx(ctx, &roleRelations, query, args...)
	if err != nil {
		return nil, err
	}
	if  len(roleRelations) == 0 {
		return nil, nil
	}
	// 按 user_id 分组
	roleMap := make(map[int64][]*Role)
	for _, rr := range roleRelations {
		roleMap[rr.UserId] = append(roleMap[rr.UserId], &Role{
			Id:          rr.RoleId,
			RoleName:    rr.RoleName,
			Description: rr.Description,
		})
	}

	return roleMap, nil
}

func newUserRoleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserRoleModel {
	return &defaultUserRoleModel{
		conn:  conn,
		table: "`user_role`",
	}
}

func (m *defaultUserRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserRoleModel) DeleteByUserId(ctx context.Context, userId int64) error  {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultUserRoleModel) FindOne(ctx context.Context, id int64) (*UserRole, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRoleRows, m.table)
	var resp UserRole
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleModel) FindOneByUserIdRoleId(ctx context.Context, userId int64, roleId int64) (*UserRole, error) {
	var resp UserRole
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `role_id` = ? limit 1", userRoleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, roleId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleModel) Insert(ctx context.Context, data *UserRole) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userRoleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.RoleId)
	return ret, err
}

func (m *defaultUserRoleModel) Update(ctx context.Context, newData *UserRole) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRoleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.RoleId, newData.Id)
	return err
}



func (m *defaultUserRoleModel) BatchInsert(ctx context.Context, roleIds []*UserRole) error {

	blk, err := sqlx.NewBulkInserter(m.conn, "insert into user_role (user_id, role_id) values (?, ?)")
	if err != nil {
		panic(err)
	}
	defer blk.Flush()
	for _, roleId := range roleIds {
		blk.Insert(roleId.UserId, roleId.RoleId)
	}

	return nil
}


func (m *defaultUserRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRoleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserRoleModel) tableName() string {
	return m.table
}
