// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleFieldNames          = builder.RawFieldNames(&Role{})
	roleRows                = strings.Join(roleFieldNames, ",")
	roleRowsExpectAutoSet   = strings.Join(stringx.Remove(roleFieldNames), ",")
	roleRowsWithPlaceHolder = strings.Join(stringx.Remove(roleFieldNames, "`id`"), "=?,") + "=?"
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Role, error)
		FindOneByRoleName(ctx context.Context, roleName string) (*Role, error)
		Update(ctx context.Context, data *Role) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Role struct {
		Id          int64        `db:"id"`
		ParentId    int64        `db:"parent_id"`
		RoleName    string       `db:"role_name"`
		Description string       `db:"description"`
		CreatedAt   time.Time    `db:"created_at"`
		DeleteAt    sql.NullTime `db:"delete_at"`
		UpdatedAt   sql.NullTime `db:"updated_at"`
		Status      int64        `db:"status"`
	}
)

func newRoleModel(conn sqlx.SqlConn) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  conn,
		table: "`role`",
	}
}

func (m *defaultRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoleModel) FindOne(ctx context.Context, id int64) (*Role, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleRows, m.table)
	var resp Role
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) FindOneByRoleName(ctx context.Context, roleName string) (*Role, error) {
	var resp Role
	query := fmt.Sprintf("select %s from %s where `role_name` = ? limit 1", roleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, roleName)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, roleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ParentId, data.RoleName, data.Description, data.CreatedAt, data.DeleteAt, data.UpdatedAt, data.Status)
	return ret, err
}

func (m *defaultRoleModel) Update(ctx context.Context, newData *Role) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ParentId, newData.RoleName, newData.Description, newData.CreatedAt, newData.DeleteAt, newData.UpdatedAt, newData.Status, newData.Id)
	return err
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
