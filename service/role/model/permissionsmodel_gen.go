// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	model "menu-model"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	permissionsFieldNames          = builder.RawFieldNames(&Permissions{})
	permissionsRows                = strings.Join(permissionsFieldNames, ",")
	permissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(permissionsFieldNames), ",")
	permissionsRowsWithPlaceHolder = strings.Join(stringx.Remove(permissionsFieldNames, "`id`"), "=?,") + "=?"
)

type (
	permissionsModel interface {
		Insert(ctx context.Context, data *Permissions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Permissions, error)
		Update(ctx context.Context, data *Permissions) error
		Delete(ctx context.Context, id int64) error
		FindRoleList(ctx context.Context, roleIds []int64) ([]*model.Menu, error)
		BatchInsert(ctx context.Context, permissions []*Permissions) error
	}

	defaultPermissionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Permissions struct {
		Id           int64 `db:"id"`
		RoleId       int64 `db:"role_id"`
		PermissionId int64 `db:"permission_id"`
	}
)

func newPermissionsModel(conn sqlx.SqlConn) *defaultPermissionsModel {
	return &defaultPermissionsModel{
		conn:  conn,
		table: "`permissions`",
	}
}

func (m *defaultPermissionsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPermissionsModel) FindOne(ctx context.Context, id int64) (*Permissions, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", permissionsRows, m.table)
	var resp Permissions
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionsModel) Insert(ctx context.Context, data *Permissions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, permissionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.RoleId, data.PermissionId)
	return ret, err
}

func (m *defaultPermissionsModel) Update(ctx context.Context, data *Permissions) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, permissionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RoleId, data.PermissionId, data.Id)
	return err
}

func (m *defaultPermissionsModel) BatchInsert(ctx context.Context, permissions []*Permissions) error {

	blk, err := sqlx.NewBulkInserter(m.conn, "insert into permissions (id, role_id, permission_id) values (? ,?, ?)")
	if err != nil {
		panic(err)
	}
	defer blk.Flush()
	for _, v := range permissions {
		blk.Insert(v.Id, v.RoleId, v.PermissionId)
	}

	return nil
}

func (m *defaultPermissionsModel) FindRoleList(ctx context.Context, roleIds []int64) ([]*model.Menu, error) {

	if len(roleIds) == 0 {
		return nil, nil
	}
	placeholders := make([]string, len(roleIds))
	for i := range placeholders {
		placeholders[i] = "?"
	}
	result := strings.Join(placeholders, ",")

	args := make([]interface{}, len(roleIds))
	for i, id := range roleIds {
		args[i] = id
	}

	var list []struct {
		RoleId      int64  `db:"role_id"`
		PermissioId int64  `db:"permission_id"`
		Id          uint64 `db:"id"`
		Path        string `db:"path"`
		Method      string `db:"method"`
	}

	query := `select p.role_id, p.permission_id, m.id, m.path, m.method FROM permissions p INNER JOIN menu m ON m.id = p.permission_id WHERE p.role_id IN (` + result + `)`
	err := m.conn.QueryRowsCtx(ctx, &list, query, args...)
	if err != nil {
		return nil, err
	}

	if len(list) == 0 {
		return nil, nil
	}

	res := make([]*model.Menu, len(list))
	for i, item := range list {
		res[i] = &model.Menu{
			Id:     item.Id,
			Path:   item.Path,
			Method: item.Method,
		}
	}

	return res, nil
}

func (m *defaultPermissionsModel) tableName() string {
	return m.table
}
