// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: role.proto

package server

import (
	"context"
	"role-rpc/internal/logic"
	"role-rpc/internal/svc"
	"role-rpc/pb/role"
)

type RoleServer struct {
	svcCtx *svc.ServiceContext
	role.UnimplementedRoleServer
}

func NewRoleServer(svcCtx *svc.ServiceContext) *RoleServer {
	return &RoleServer{
		svcCtx: svcCtx,
	}
}

func (s *RoleServer) Create(ctx context.Context, in *role.CreateRequest) (*role.CreateResponse, error) {
	l := logic.NewCreateLogic(ctx, s.svcCtx)
	return l.Create(in)
}

func (s *RoleServer) Update(ctx context.Context, in *role.UpdateRequest) (*role.UpdateResponse, error) {
	l := logic.NewUpdateLogic(ctx, s.svcCtx)
	return l.Update(in)
}

func (s *RoleServer) Delete(ctx context.Context, in *role.DeleteRequest) (*role.DeleteResponse, error) {
	l := logic.NewDeleteLogic(ctx, s.svcCtx)
	return l.Delete(in)
}

func (s *RoleServer) List(ctx context.Context, in *role.ListRequest) (*role.ListResponse, error) {
	l := logic.NewListLogic(ctx, s.svcCtx)
	return l.List(in)
}

func (s *RoleServer) CreatePermission(ctx context.Context, in *role.PermissionCreateRequest) (*role.PermissionCreateResponse, error) {
	l := logic.NewCreatePermissionLogic(ctx, s.svcCtx)
	return l.CreatePermission(in)
}

func (s *RoleServer) DeletePermission(ctx context.Context, in *role.PermissionDeleteRequest) (*role.PermissionDeleteResponse, error) {
	l := logic.NewDeletePermissionLogic(ctx, s.svcCtx)
	return l.DeletePermission(in)
}

func (s *RoleServer) GetRolesByUserIds(ctx context.Context, in *role.GetRolesByUserIdsReq) (*role.GetRolesByUserIdsResp, error) {
	l := logic.NewGetRolesByUserIdsLogic(ctx, s.svcCtx)
	return l.GetRolesByUserIds(in)
}

func (s *RoleServer) GetPermissionByRole(ctx context.Context, in *role.GetPermissionByRoleRequest) (*role.GetPermissionByRoleResponse, error) {
	l := logic.NewGetPermissionByRoleLogic(ctx, s.svcCtx)
	return l.GetPermissionByRole(in)
}

func (s *RoleServer) BindRoleByUserId(ctx context.Context, in *role.BindRoleByUserRequest) (*role.BindRoleByUserResponse, error) {
	l := logic.NewBindRoleByUserIdLogic(ctx, s.svcCtx)
	return l.BindRoleByUserId(in)
}
