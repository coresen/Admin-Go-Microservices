// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: role.proto

package roleclient

import (
	"context"
	"role-rpc/pb/role"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BindRoleByUserRequest       = role.BindRoleByUserRequest
	BindRoleByUserResponse      = role.BindRoleByUserResponse
	CreateRequest               = role.CreateRequest
	CreateResponse              = role.CreateResponse
	DeleteRequest               = role.DeleteRequest
	DeleteResponse              = role.DeleteResponse
	DetailResponse              = role.DetailResponse
	GetPermissionByRoleRequest  = role.GetPermissionByRoleRequest
	GetPermissionByRoleResponse = role.GetPermissionByRoleResponse
	GetRolesByUserIdsReq        = role.GetRolesByUserIdsReq
	GetRolesByUserIdsResp       = role.GetRolesByUserIdsResp
	ListRequest                 = role.ListRequest
	ListResponse                = role.ListResponse
	Permission                  = role.Permission
	PermissionCreateRequest     = role.PermissionCreateRequest
	PermissionCreateResponse    = role.PermissionCreateResponse
	PermissionDeleteRequest     = role.PermissionDeleteRequest
	PermissionDeleteResponse    = role.PermissionDeleteResponse
	PermissionDetail            = role.PermissionDetail
	PermissionItem              = role.PermissionItem
	RoleList                    = role.RoleList
	UpdateRequest               = role.UpdateRequest
	UpdateResponse              = role.UpdateResponse

	Role interface {
		Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
		Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
		Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
		List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
		CreatePermission(ctx context.Context, in *PermissionCreateRequest, opts ...grpc.CallOption) (*PermissionCreateResponse, error)
		DeletePermission(ctx context.Context, in *PermissionDeleteRequest, opts ...grpc.CallOption) (*PermissionDeleteResponse, error)
		GetRolesByUserIds(ctx context.Context, in *GetRolesByUserIdsReq, opts ...grpc.CallOption) (*GetRolesByUserIdsResp, error)
		GetPermissionByRole(ctx context.Context, in *GetPermissionByRoleRequest, opts ...grpc.CallOption) (*GetPermissionByRoleResponse, error)
		BindRoleByUserId(ctx context.Context, in *BindRoleByUserRequest, opts ...grpc.CallOption) (*BindRoleByUserResponse, error)
	}

	defaultRole struct {
		cli zrpc.Client
	}
)

func NewRole(cli zrpc.Client) Role {
	return &defaultRole{
		cli: cli,
	}
}

func (m *defaultRole) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	client := role.NewRoleClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultRole) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	client := role.NewRoleClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultRole) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	client := role.NewRoleClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultRole) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	client := role.NewRoleClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultRole) CreatePermission(ctx context.Context, in *PermissionCreateRequest, opts ...grpc.CallOption) (*PermissionCreateResponse, error) {
	client := role.NewRoleClient(m.cli.Conn())
	return client.CreatePermission(ctx, in, opts...)
}

func (m *defaultRole) DeletePermission(ctx context.Context, in *PermissionDeleteRequest, opts ...grpc.CallOption) (*PermissionDeleteResponse, error) {
	client := role.NewRoleClient(m.cli.Conn())
	return client.DeletePermission(ctx, in, opts...)
}

func (m *defaultRole) GetRolesByUserIds(ctx context.Context, in *GetRolesByUserIdsReq, opts ...grpc.CallOption) (*GetRolesByUserIdsResp, error) {
	client := role.NewRoleClient(m.cli.Conn())
	return client.GetRolesByUserIds(ctx, in, opts...)
}

func (m *defaultRole) GetPermissionByRole(ctx context.Context, in *GetPermissionByRoleRequest, opts ...grpc.CallOption) (*GetPermissionByRoleResponse, error) {
	client := role.NewRoleClient(m.cli.Conn())
	return client.GetPermissionByRole(ctx, in, opts...)
}

func (m *defaultRole) BindRoleByUserId(ctx context.Context, in *BindRoleByUserRequest, opts ...grpc.CallOption) (*BindRoleByUserResponse, error) {
	client := role.NewRoleClient(m.cli.Conn())
	return client.BindRoleByUserId(ctx, in, opts...)
}
