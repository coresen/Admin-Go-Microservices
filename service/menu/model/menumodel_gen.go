// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
	"time"
)

var (
	menuFieldNames          = builder.RawFieldNames(&Menu{})
	menuRows                = strings.Join(menuFieldNames, ",")
	menuRowsExpectAutoSet   = strings.Join(stringx.Remove(menuFieldNames, "`id`"), ",")
	menuRowsWithPlaceHolder = strings.Join(stringx.Remove(menuFieldNames, "`id`"), "=?,") + "=?"

	cacheMenuIdPrefix = "cache:menu:id:"
)

type (
	menuModel interface {
		Insert(ctx context.Context, data *Menu) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Menu, error)
		Update(ctx context.Context, data *Menu) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultMenuModel struct {
		sqlc.CachedConn
		table string
	}

	Menu struct {
		Id         uint64         `db:"id"`
		ParentId   sql.NullInt64  `db:"parent_id"`
		MenuName   string         `db:"menu_name"`
		Code       string         `db:"code"`
		Path       string         `db:"path"`
		Method     string         `db:"method"`
		Icon       sql.NullString `db:"icon"`
		SortOrder  int64          `db:"sort_order"`
		Status     int64          `db:"status"` // 【是否正常】0:异常, 1:正常
		CreateTime time.Time      `db:"create_time"`
		DeleteTime sql.NullTime   `db:"delete_time"`
		UpdateTime time.Time      `db:"update_time"`
	}
)

func newMenuModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMenuModel {
	return &defaultMenuModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`menu`",
	}
}

func (m *defaultMenuModel) Delete(ctx context.Context, id uint64) error {
	menuIdKey := fmt.Sprintf("%s%v", cacheMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, menuIdKey)
	return err
}

func (m *defaultMenuModel) FindOne(ctx context.Context, id uint64) (*Menu, error) {
	menuIdKey := fmt.Sprintf("%s%v", cacheMenuIdPrefix, id)
	var resp Menu
	err := m.QueryRowCtx(ctx, &resp, menuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) Insert(ctx context.Context, data *Menu) (sql.Result, error) {
	menuIdKey := fmt.Sprintf("%s%v", cacheMenuIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, menuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.MenuName, data.Code, data.Path, data.Method, data.Icon, data.SortOrder, data.Status, data.CreateTime, data.DeleteTime, data.UpdateTime)
	}, menuIdKey)
	return ret, err
}

func (m *defaultMenuModel) Update(ctx context.Context, data *Menu) error {
	menuIdKey := fmt.Sprintf("%s%v", cacheMenuIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, menuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.MenuName, data.Code, data.Path, data.Method, data.Icon, data.SortOrder, data.Status, data.CreateTime, data.DeleteTime, data.UpdateTime, data.Id)
	}, menuIdKey)
	return err
}

func (m *defaultMenuModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMenuIdPrefix, primary)
}

func (m *defaultMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMenuModel) tableName() string {
	return m.table
}
